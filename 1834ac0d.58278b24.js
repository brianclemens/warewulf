(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{115:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),p=r,f=u["".concat(l,".").concat(p)]||u[p]||b[p]||a;return n?o.a.createElement(f,i(i({ref:t},c),{},{components:n})):o.a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var r=n(3),o=n(7),a=(n(0),n(115)),l={id:"quickstart-el7",title:"Quick Start for RHEL and CentOS 7"},i={unversionedId:"getting-started/quickstart-el7",id:"getting-started/quickstart-el7",isDocsHomePage:!1,title:"Quick Start for RHEL and CentOS 7",description:"Install Warewulf and dependencies",source:"@site/docs/getting-started/quickstart-el7.md",slug:"/getting-started/quickstart-el7",permalink:"/warewulf/docs/getting-started/quickstart-el7",editUrl:"https://github.com/ctrliq/warewulf/edit/main/docs/docs/getting-started/quickstart-el7.md",version:"current",sidebar:"someSidebar",previous:{title:"Software",permalink:"/warewulf/docs/prerequisites/software"},next:{title:"Quick Start for RHEL, CentOS, and Rocky 8",permalink:"/warewulf/docs/getting-started/quickstart-el8"}},s=[{value:"Start the Warewulf daemon",id:"start-the-warewulf-daemon",children:[]},{value:"Boot your compute node and watch it boot",id:"boot-your-compute-node-and-watch-it-boot",children:[]}],c={toc:s};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"install-warewulf-and-dependencies"},"Install Warewulf and dependencies"),Object(a.b)("p",null,".. code-block:: bash"),Object(a.b)("p",null,"   $ sudo yum install epel-release\n$ sudo yum install golang tftp-server dhcp nfs-utils"),Object(a.b)("p",null,"   $ sudo systemctl stop firewalld\n$ sudo systemctl disable firewalld"),Object(a.b)("p",null,"   $ git clone ",Object(a.b)("a",{parentName:"p",href:"https://github.com/ctrliq/warewulf.git"},"https://github.com/ctrliq/warewulf.git"),"\n$ cd warewulf\n$ make all\n$ sudo make install"),Object(a.b)("h1",{id:"configure-the-controller"},"Configure the controller"),Object(a.b)("p",null,"Edit the file ",Object(a.b)("inlineCode",{parentName:"p"},"/etc/warewulf/warewulf.conf")," and ensure that you've set the appropriate configuration paramaters. Here are some of the defaults for reference:"),Object(a.b)("p",null,".. code-block:: yaml"),Object(a.b)("p",null,"   ipaddr: 192.168.1.1\nnetmask: 255.255.255.0\nwarewulf:\nport: 9873\nsecure: true\nupdate interval: 60\ndhcp:\nenabled: true\nrange start: 192.168.1.150\nrange end: 192.168.1.200\ntemplate: default\nsystemd name: dhcpd\ntftp:\nenabled: true\ntftproot: /var/lib/tftpboot\nsystemd name: tftp\nnfs:\nsystemd name: nfs-server\nexports:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"   - /home\n   - /var/warewulf\n")),Object(a.b)("h1",{id:"configure-system-services-automatically"},"Configure system services automatically"),Object(a.b)("p",null,".. code-block:: bash"),Object(a.b)("p",null,"   $ sudo wwctl configure dhcp # Create the default dhcpd.conf file and start/enable service\n$ sudo wwctl configure tftp # Install the base tftp/PXE boot files and start/enable service\n$ sudo wwctl configure nfs  # Configure the exports and create an fstab in the default system overlay\n$ sudo wwctl configure ssh  # Build the basic ssh keys to be included by the default system overlay"),Object(a.b)("h1",{id:"pull-and-build-the-vnfs-container-and-kernel"},"Pull and build the VNFS container and kernel"),Object(a.b)("p",null,'This will pull a basic VNFS container from Docker Hub and import the default running kernel from the controller node and set both in the "default" node profile.'),Object(a.b)("p",null,".. code-block:: bash"),Object(a.b)("p",null,"   $ sudo wwctl container import docker://warewulf/centos-7 centos-7 --setdefault\n$ sudo wwctl kernel import $(uname -r) --setdefault"),Object(a.b)("h1",{id:"set-up-the-default-node-profile"},"Set up the default node profile"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"--setdefault")," arguments above will automatically set those entries in the default profile, but if you wanted to set them by hand to something different, you can do the following:"),Object(a.b)("p",null,".. code-block:: bash"),Object(a.b)("p",null,"   $ sudo wwctl profile set default -K $(uname -r) -C centos-7"),Object(a.b)("p",null,"Next we set some default networking configurations for the first ethernet device. On modern Linux distributions, the name of the device is not critical, as it will be setup according to the HW address. Because all nodes will share the netmask and gateway configuration, we can set them in the default profile as follows:"),Object(a.b)("p",null,".. code-block:: bash"),Object(a.b)("p",null,"   $ sudo wwctl profile set default --netdev eth0 -M 255.255.255.0 -G 192.168.1.1\n$ sudo wwctl profile list"),Object(a.b)("h1",{id:"add-a-node-and-build-node-specific-overlays"},"Add a node and build node specific overlays"),Object(a.b)("p",null,"Adding nodes can be done while setting configurations in one command. Here we are setting the IP address of ",Object(a.b)("inlineCode",{parentName:"p"},"eth0")," and setting this node to be discoverable, which will then automatically have the HW address added to the configuration as the node boots."),Object(a.b)("p",null,"Node names must be unique. If you have node groups and/or multiple clusters, designate them using dot notation."),Object(a.b)("p",null,"Note that the full node configuration comes from both cascading profiles and node configurations which always supersede profile configurations."),Object(a.b)("p",null,".. code-block:: bash"),Object(a.b)("p",null,"   $ sudo wwctl node add n0000.cluster --netdev eth0 -I 192.168.1.100 --discoverable\n$ sudo wwctl node list -a n0000"),Object(a.b)("h1",{id:"warewulf-overlays"},"Warewulf Overlays"),Object(a.b)("p",null,"There are two types of overlays: system and runtime overlays."),Object(a.b)("p",null,"System overlays are provisioned to the node before ",Object(a.b)("inlineCode",{parentName:"p"},"/sbin/init")," is called. This enables us to prepopulate node configurations with content that is node specific like networking and service configurations."),Object(a.b)("p",null,"Runtime overlays are provisioned after the node has booted and periodically during the normal runtime of the node. Because these overlays are provisioned at periodic intervals, they are very useful for content that changes, like users and groups."),Object(a.b)("p",null,"Overlays are generated from a template structure that is viewed using the ",Object(a.b)("inlineCode",{parentName:"p"},"wwctl overlay")," commands. Files that end in the ",Object(a.b)("inlineCode",{parentName:"p"},".ww")," suffix are templates and abide by standard text/template rules. This supports loops, arrays, variables, and functions making overlays extremely flexible."),Object(a.b)("p",null,".. note::\nWhen using the overlay subsystem, system overlays are never shown by default. So when running ",Object(a.b)("inlineCode",{parentName:"p"},"overlay")," commands, you are always looking at runtime overlays unless the ",Object(a.b)("inlineCode",{parentName:"p"},"-s")," option is passed."),Object(a.b)("p",null,"All overlays are compiled before being provisioned. This accelerates the provisioning process because there is less to do when nodes are being managed at scale."),Object(a.b)("p",null,"Here are some of the common ",Object(a.b)("inlineCode",{parentName:"p"},"overlay")," commands:"),Object(a.b)("p",null,".. code-block:: bash"),Object(a.b)("p",null,"   $ sudo wwctl overlay list -l\n$ sudo wwctl overlay list -ls\n$ sudo wwctl overlay edit default /etc/hello_world.ww\n$ sudo wwctl overlay build -a"),Object(a.b)("h2",{id:"start-the-warewulf-daemon"},"Start the Warewulf daemon"),Object(a.b)("p",null,'Once the above provisioning images are built, you can check the provisioning "rediness" and then begin booting nodes.'),Object(a.b)("p",null,".. code-block:: bash"),Object(a.b)("p",null,"   $ sudo wwctl ready\n$ sudo wwctl server start\n$ sudo wwctl server status"),Object(a.b)("h2",{id:"boot-your-compute-node-and-watch-it-boot"},"Boot your compute node and watch it boot"))}d.isMDXComponent=!0}}]);
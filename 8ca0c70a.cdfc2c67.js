(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{117:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return w}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=r,w=d["".concat(a,".").concat(f)]||d[f]||u[f]||i;return n?o.a.createElement(w,c(c({ref:t},s),{},{components:n})):o.a.createElement(w,c({ref:t},s))}));function w(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),i=(n(0),n(117)),a={id:"profile",title:"wwctl profile"},c={unversionedId:"wwctl/profile",id:"wwctl/profile",isDocsHomePage:!1,title:"wwctl profile",description:"Management of node profile settings",source:"@site/docs/wwctl/profile.md",slug:"/wwctl/profile",permalink:"/warewulf/docs/wwctl/profile",editUrl:"https://github.com/ctrliq/warewulf/edit/main/docs/docs/wwctl/profile.md",version:"current",sidebar:"someSidebar",previous:{title:"wwctl power",permalink:"/warewulf/docs/wwctl/power"},next:{title:"wwctl ready",permalink:"/warewulf/docs/wwctl/ready"}},l=[],s={toc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Management of node profile settings"),Object(i.b)("p",null,"add"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"This command will add a new node profile.\n\ndelete\n")),Object(i.b)("p",null,"This command will delete a node profile."),Object(i.b)("p",null,"list"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"This command will list and show the profile configurations.\n\nset\n~~~\nThis command will allow you to set configuration properties for node profiles.\n\n--comment  Set a comment for this node\n-C, --container  Set the container (VNFS) for this node\n-K, --kernel  Set Kernel version for nodes\n-A, --kernelargs  Set Kernel argument for nodes\n-c, --cluster  Set the node's cluster group\n-P, --ipxe  Set the node's iPXE template name\n-i, --init  Define the init process to boot the container\n--root  Define the rootfs\n-R, --runtime  Set the node's runtime overlay\n-S, --system  Set the node's system overlay\n--ipminetmask  Set the node's IPMI netmask\n--ipmigateway  Set the node's IPMI gateway\n--ipmiuser  Set the node's IPMI username\n--ipmipass  Set the node's IPMI password\n-N, --netdev  Define the network device to configure\n-I, --ipaddr  Set the node's network device IP address\n-M, --netmask  Set the node's network device netmask\n-G, --gateway  Set the node's network device gateway\n-H, --hwaddr  Set the node's network device HW address\n--netdel  Delete the node's network device\n--netdefault  Set this network to be default\n-a, --all  Set all profiles\n-f, --force  Force configuration (even on error)\n\n")))}p.isMDXComponent=!0}}]);